
import static java.util.Arrays.stream;
import static java.util.stream.IntStream.range;

public class Lanternfish {

	private static long simulate(int days, int... initialStates) {
		long[] counts = new long[9];
		stream(initialStates).forEach(i -> counts[i]++);
		range(0, days).forEach(day -> {
			long reproducing = counts[0];
			range(1, 9).forEach(i -> counts[i - 1] = counts[i]);
			counts[6] += reproducing;
			counts[8] = reproducing;
		});
		return stream(counts).sum();
	}

	public static void main(String[] args) {
		System.err.println(simulate(18, 3, 4, 3, 1, 2));
		System.err.println(simulate(80, 3, 4, 3, 1, 2));
		System.err.println(simulate(256, 3, 4, 3, 1, 2));
    System.err.println(
				simulate(80, 3, 3, 5, 1, 1, 3, 4, 2, 3, 4, 3, 1, 1, 3, 3, 1, 5, 4, 4, 1, 4, 1, 1, 1, 3, 3, 2, 3, 3, 4,
						2, 5, 1, 4, 1, 2, 2, 4, 2, 5, 1, 2, 2, 1, 1, 1, 1, 4, 5, 4, 3, 1, 4, 4, 4, 5, 1, 1, 4, 3, 4, 2,
						1, 1, 1, 1, 5, 2, 1, 4, 2, 4, 2, 5, 5, 5, 3, 3, 5, 4, 5, 1, 1, 5, 5, 5, 2, 1, 3, 1, 1, 2, 2, 2,
						2, 1, 1, 2, 1, 5, 1, 2, 1, 2, 5, 5, 2, 1, 1, 4, 2, 1, 4, 2, 1, 1, 1, 4, 2, 5, 1, 5, 1, 1, 3, 1,
						4, 3, 1, 3, 2, 1, 3, 1, 4, 1, 2, 1, 5, 1, 2, 1, 4, 4, 1, 3, 1, 1, 1, 1, 1, 5, 2, 1, 5, 5, 5, 3,
						3, 1, 2, 4, 3, 2, 2, 2, 2, 2, 4, 3, 4, 4, 4, 1, 2, 2, 3, 1, 1, 4, 1, 1, 1, 2, 1, 4, 2, 1, 2, 1,
						1, 2, 1, 5, 1, 1, 3, 1, 4, 3, 2, 1, 1, 1, 5, 4, 1, 2, 5, 2, 2, 1, 1, 1, 1, 2, 3, 3, 2, 5, 1, 2,
						1, 2, 3, 4, 3, 2, 1, 1, 2, 4, 3, 3, 1, 1, 2, 5, 1, 3, 3, 4, 2, 3, 1, 2, 1, 4, 3, 2, 2, 1, 1, 2,
						1, 4, 2, 4, 1, 4, 1, 4, 4, 1, 4, 4, 5, 4, 1, 1, 1, 3, 1, 1, 1, 4, 3, 5, 1, 1, 1, 3, 4, 1, 1, 4,
						3, 1, 4, 1, 1, 5, 1, 2, 2, 5, 5, 2, 1, 5));
	}
		System.err.println(
				simulate(256, 3, 3, 5, 1, 1, 3, 4, 2, 3, 4, 3, 1, 1, 3, 3, 1, 5, 4, 4, 1, 4, 1, 1, 1, 3, 3, 2, 3, 3, 4,
						2, 5, 1, 4, 1, 2, 2, 4, 2, 5, 1, 2, 2, 1, 1, 1, 1, 4, 5, 4, 3, 1, 4, 4, 4, 5, 1, 1, 4, 3, 4, 2,
						1, 1, 1, 1, 5, 2, 1, 4, 2, 4, 2, 5, 5, 5, 3, 3, 5, 4, 5, 1, 1, 5, 5, 5, 2, 1, 3, 1, 1, 2, 2, 2,
						2, 1, 1, 2, 1, 5, 1, 2, 1, 2, 5, 5, 2, 1, 1, 4, 2, 1, 4, 2, 1, 1, 1, 4, 2, 5, 1, 5, 1, 1, 3, 1,
						4, 3, 1, 3, 2, 1, 3, 1, 4, 1, 2, 1, 5, 1, 2, 1, 4, 4, 1, 3, 1, 1, 1, 1, 1, 5, 2, 1, 5, 5, 5, 3,
						3, 1, 2, 4, 3, 2, 2, 2, 2, 2, 4, 3, 4, 4, 4, 1, 2, 2, 3, 1, 1, 4, 1, 1, 1, 2, 1, 4, 2, 1, 2, 1,
						1, 2, 1, 5, 1, 1, 3, 1, 4, 3, 2, 1, 1, 1, 5, 4, 1, 2, 5, 2, 2, 1, 1, 1, 1, 2, 3, 3, 2, 5, 1, 2,
						1, 2, 3, 4, 3, 2, 1, 1, 2, 4, 3, 3, 1, 1, 2, 5, 1, 3, 3, 4, 2, 3, 1, 2, 1, 4, 3, 2, 2, 1, 1, 2,
						1, 4, 2, 4, 1, 4, 1, 4, 4, 1, 4, 4, 5, 4, 1, 1, 1, 3, 1, 1, 1, 4, 3, 5, 1, 1, 1, 3, 4, 1, 1, 4,
						3, 1, 4, 1, 1, 5, 1, 2, 2, 5, 5, 2, 1, 5));
	}
}
